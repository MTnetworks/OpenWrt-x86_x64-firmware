#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: OpenWrt 编译

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - 'ying.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: ying.config
  DIY_SH: diy.sh
  FREE_UP_DISK: false
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout 检查系统
      uses: actions/checkout@master

    - name: Initialization environment 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Free up disk space 清除空间
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Clone source code 获取固件源码
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
      
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a      
        
#    - name: Update luci-app-adguardhome 更新adguardhome插件源码
#      run: |
#        cd openwrt/package 
#        git clone https://github.com/rufengsuixing/luci-app-adguardhome.git adguard        
        
    - name: Update lienol-package 更新lienol大插件源码
      working-directory: ./openwrt
      run: |
        git clone https://github.com/Lienol/openwrt-package package/lienol        
        git clone https://github.com/rufengsuixing/luci-app-adguardhome.git package/adguard                   
  
#    - name: config feeds 配置package源码
#     run: |
#       cd openwrt
#       ./scripts/feeds clean
#       ./scripts/feeds update -a
#       rm -rf feeds/lienol/lienol/ipt2socks
#       rm -rf feeds/lienol/lienol/shadowsocksr-libev
#       rm -rf feeds/lienol/lienol/pdnsd-alt
#       rm -rf feeds/lienol/package/verysync
#        rm -rf feeds/lienol/lienol/luci-app-verysync
#        rm -rf package/lean/kcptun
#        rm -rf package/lean/trojan
#        rm -rf package/lean/v2ray
#        rm -rf package/lean/luci-app-kodexplorer
#        rm -rf package/lean/luci-app-pppoe-relay
#        rm -rf package/lean/luci-app-pptp-server
#        rm -rf package/lean/luci-app-v2ray-server
#        ./scripts/feeds install -a
      
    - name: Load custom configuration 载入自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        make defconfig

    - name: SSH connection to Actions SSH登陆配置
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package 下载插件源码
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware 编译固件中
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory 上传目录
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_directory
        path: openwrt/bin

    - name: Organize files 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Upload firmware directory 上传固件
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}
